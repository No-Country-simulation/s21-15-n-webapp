{
    "sourceFile": "frontend/hooks/use-auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1741317114206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741317128635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+\"use client\";\r\n+\r\n+import { useState, useEffect } from \"react\";\r\n+import {\r\n+  getStoredUser,\r\n+  removeAuthCookie,\r\n+  removeStoredUser,\r\n+} from \"@/lib/utils/auth\";\r\n+import { useRouter } from \"next/navigation\";\r\n+import { ROUTES } from \"@/lib/constants/routes\";\r\n+import type { User } from \"@/lib/types\";\r\n+\r\n+export function useAuth() {\r\n+  const [user, setUser] = useState<User | null>(null);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const router = useRouter();\r\n+\r\n+  useEffect(() => {\r\n+    // Verificar si hay un usuario almacenado\r\n+    const storedUser = getStoredUser();\r\n+    setUser(storedUser);\r\n+    setIsLoading(false);\r\n+  }, []);\r\n+\r\n+  // Mejorar la función logout para asegurar que se eliminen todas las cookies\r\n+  const logout = () => {\r\n+    // Eliminar cookies y datos de usuario\r\n+    removeAuthCookie(); // Esto ahora también elimina la cookie de rol\r\n+    removeStoredUser();\r\n+\r\n+    // Actualizar el estado local inmediatamente\r\n+    setUser(null);\r\n+\r\n+    // Redirigir a la página principal\r\n+    router.push(ROUTES.HOME);\r\n+  };\r\n+\r\n+  const navigateToDashboard = () => {\r\n+    if (!user) return;\r\n+\r\n+    const dashboardRoute = getDashboardRouteByRole(user.role);\r\n+    router.push(dashboardRoute);\r\n+  };\r\n+\r\n+  return {\r\n+    user,\r\n+    isAuthenticated: !!user,\r\n+    isLoading,\r\n+    logout,\r\n+    navigateToDashboard,\r\n+  };\r\n+}\r\n+\r\n+export function getDashboardRouteByRole(role: User[\"role\"]): string {\r\n+  switch (role) {\r\n+    case \"admin\":\r\n+      return ROUTES.ADMIN;\r\n+    case \"mentor\":\r\n+      return ROUTES.MENTOR;\r\n+    case \"company\":\r\n+      return ROUTES.COMPANY;\r\n+    case \"junior\":\r\n+    default:\r\n+      return ROUTES.JUNIOR;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1741320330856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +0,0 @@\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import {\r\n-  getStoredUser,\r\n-  removeAuthCookie,\r\n-  removeStoredUser,\r\n-} from \"@/lib/utils/auth\";\r\n-import { useRouter } from \"next/navigation\";\r\n-import { ROUTES } from \"@/lib/constants/routes\";\r\n-import type { User } from \"@/lib/types\";\r\n-\r\n-export function useAuth() {\r\n-  const [user, setUser] = useState<User | null>(null);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const router = useRouter();\r\n-\r\n-  useEffect(() => {\r\n-    // Verificar si hay un usuario almacenado\r\n-    const storedUser = getStoredUser();\r\n-    setUser(storedUser);\r\n-    setIsLoading(false);\r\n-  }, []);\r\n-\r\n-  // Mejorar la función logout para asegurar que se eliminen todas las cookies\r\n-  const logout = () => {\r\n-    // Eliminar cookies y datos de usuario\r\n-    removeAuthCookie(); // Esto ahora también elimina la cookie de rol\r\n-    removeStoredUser();\r\n-\r\n-    // Actualizar el estado local inmediatamente\r\n-    setUser(null);\r\n-\r\n-    // Redirigir a la página principal\r\n-    router.push(ROUTES.HOME);\r\n-  };\r\n-\r\n-  const navigateToDashboard = () => {\r\n-    if (!user) return;\r\n-\r\n-    const dashboardRoute = getDashboardRouteByRole(user.role);\r\n-    router.push(dashboardRoute);\r\n-  };\r\n-\r\n-  return {\r\n-    user,\r\n-    isAuthenticated: !!user,\r\n-    isLoading,\r\n-    logout,\r\n-    navigateToDashboard,\r\n-  };\r\n-}\r\n-\r\n-export function getDashboardRouteByRole(role: User[\"role\"]): string {\r\n-  switch (role) {\r\n-    case \"admin\":\r\n-      return ROUTES.ADMIN;\r\n-    case \"mentor\":\r\n-      return ROUTES.MENTOR;\r\n-    case \"company\":\r\n-      return ROUTES.COMPANY;\r\n-    case \"junior\":\r\n-    default:\r\n-      return ROUTES.JUNIOR;\r\n-  }\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741320335453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,63 @@\n-\n+\"use client\"\r\n+\r\n+import { useState, useEffect } from \"react\"\r\n+import { getStoredUser, removeAuthCookie, removeStoredUser } from \"@/lib/utils/auth\"\r\n+import { useRouter } from \"next/navigation\"\r\n+import { ROUTES } from \"@/lib/constants/routes\"\r\n+import type { User } from \"@/lib/types\"\r\n+\r\n+export function useAuth() {\r\n+  const [user, setUser] = useState<User | null>(null)\r\n+  const [isLoading, setIsLoading] = useState(true)\r\n+  const router = useRouter()\r\n+\r\n+  useEffect(() => {\r\n+    // Verificar si hay un usuario almacenado\r\n+    const storedUser = getStoredUser()\r\n+    setUser(storedUser)\r\n+    setIsLoading(false)\r\n+  }, [])\r\n+\r\n+  // Mejorar la función logout para asegurar que se eliminen todas las cookies\r\n+  const logout = () => {\r\n+    // Eliminar cookies y datos de usuario\r\n+    removeAuthCookie() // Esto ahora también elimina la cookie de rol\r\n+    removeStoredUser()\r\n+\r\n+    // Actualizar el estado local inmediatamente\r\n+    setUser(null)\r\n+\r\n+    // Redirigir a la página principal\r\n+    router.push(ROUTES.HOME)\r\n+  }\r\n+\r\n+  const navigateToDashboard = () => {\r\n+    if (!user) return\r\n+\r\n+    const dashboardRoute = getDashboardRouteByRole(user.role)\r\n+    router.push(dashboardRoute)\r\n+  }\r\n+\r\n+  return {\r\n+    user,\r\n+    isAuthenticated: !!user,\r\n+    isLoading,\r\n+    logout,\r\n+    navigateToDashboard,\r\n+  }\r\n+}\r\n+\r\n+export function getDashboardRouteByRole(role: User[\"role\"]): string {\r\n+  switch (role) {\r\n+    case \"admin\":\r\n+      return ROUTES.ADMIN\r\n+    case \"mentor\":\r\n+      return ROUTES.MENTOR\r\n+    case \"company\":\r\n+      return ROUTES.COMPANY\r\n+    case \"junior\":\r\n+    default:\r\n+      return ROUTES.JUNIOR\r\n+  }\r\n+}\r\n+\r\n"
                }
            ],
            "date": 1741317114206,
            "name": "Commit-0",
            "content": ""
        }
    ]
}