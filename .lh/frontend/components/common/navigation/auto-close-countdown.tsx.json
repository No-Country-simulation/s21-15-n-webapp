{
    "sourceFile": "frontend/components/common/navigation/auto-close-countdown.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1741622501660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741622561003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n interface AutoCloseCountdownProps {\n   readonly seconds: number\n   readonly message?: string\n-  readonly variant?: \"default\" | \"destructive\" | \"primary\"\n+  readonly variant?: \"default\" | \"destructive\" | \"link\" | \"outline\" | \"secondary\" | \"ghost\"\n   readonly onComplete?: () => void\n   readonly showCloseButton?: boolean\n   readonly closeButtonText?: string\n }\n"
                },
                {
                    "date": 1741622698987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n interface AutoCloseCountdownProps {\n   readonly seconds: number\n   readonly message?: string\n-  readonly variant?: \"default\" | \"destructive\" | \"link\" | \"outline\" | \"secondary\" | \"ghost\"\n+  readonly variant?: \"default\" | \"destructive\" | \"link\" | \"outline\" | \"secondary\" | \"ghost\" | \"\"\n   readonly onComplete?: () => void\n   readonly showCloseButton?: boolean\n   readonly closeButtonText?: string\n }\n"
                },
                {
                    "date": 1741622707153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n interface AutoCloseCountdownProps {\n   readonly seconds: number\n   readonly message?: string\n-  readonly variant?: \"default\" | \"destructive\" | \"link\" | \"outline\" | \"secondary\" | \"ghost\" | \"\"\n+  readonly variant?: \"default\" | \"destructive\" | \"link\" | \"outline\" | \"secondary\" | \"ghost\" | \"primery\"\n   readonly onComplete?: () => void\n   readonly showCloseButton?: boolean\n   readonly closeButtonText?: string\n }\n"
                },
                {
                    "date": 1741622859780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,81 +0,0 @@\n-\"use client\"\n-\n-import { useState, useEffect } from \"react\"\n-import { Button } from \"@/components/ui/button\"\n-import { cn } from \"@/lib/utils\"\n-\n-// Textos locales para el componente de cuenta regresiva\n-const COUNTDOWN_TEXT = {\n-  defaultMessage: \"Cerrando en\",\n-  closeButtonText: \"Cerrar ahora\",\n-  seconds: \"segundos\",\n-}\n-\n-interface AutoCloseCountdownProps {\n-  readonly seconds: number\n-  readonly message?: string\n-  readonly variant?: \"default\" | \"destructive\" | \"link\" | \"outline\" | \"secondary\" | \"ghost\" | \"primary\"\n-  readonly onComplete?: () => void\n-  readonly showCloseButton?: boolean\n-  readonly closeButtonText?: string\n-}\n-\n-export function AutoCloseCountdown({\n-  seconds,\n-  message = COUNTDOWN_TEXT.defaultMessage,\n-  variant = \"default\",\n-  onComplete,\n-  showCloseButton = true,\n-  closeButtonText = COUNTDOWN_TEXT.closeButtonText,\n-}: AutoCloseCountdownProps) {\n-  const [countdown, setCountdown] = useState(seconds)\n-\n-  useEffect(() => {\n-    // Iniciar cuenta regresiva\n-    const timer = setInterval(() => {\n-      setCountdown((prev) => {\n-        if (prev <= 1) {\n-          clearInterval(timer)\n-          // Intentar cerrar la ventana del navegador\n-          window.close()\n-          // Ejecutar callback si existe\n-          onComplete?.()\n-          return 0\n-        }\n-        return prev - 1\n-      })\n-    }, 1000)\n-\n-    return () => clearInterval(timer)\n-  }, [onComplete])\n-\n-  const handleCloseWindow = () => {\n-    window.close()\n-    onComplete?.()\n-  }\n-\n-  const getTextColorClass = () => {\n-    switch (variant) {\n-      case \"destructive\":\n-        return \"text-destructive\"\n-      case \"primary\":\n-        return \"text-primary\"\n-      default:\n-        return \"text-foreground\"\n-    }\n-  }\n-\n-  return (\n-    <div className=\"space-y-4\">\n-      <p className=\"text-center text-muted-foreground\">\n-        {message} <span className={cn(\"font-bold\", getTextColorClass())}>{countdown}</span> {COUNTDOWN_TEXT.seconds}.\n-      </p>\n-\n-      {showCloseButton && (\n-        <Button variant={variant === \"default\" ? \"default\" : variant} className=\"w-full\" onClick={handleCloseWindow}>\n-          {closeButtonText}\n-        </Button>\n-      )}\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741622886105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n     onComplete?.()\n   }, [onComplete])\n \n   const getTextColorClass = useCallback(() => {\n-    return TEXT_CLASSES[variant] || TEXT_CLASSES.default\n+    return TEXT_CLASSES[variant:string ] || TEXT_CLASSES.default\n   }, [variant])\n \n   return (\n     <div className=\"space-y-4\">\n"
                }
            ],
            "date": 1741622501660,
            "name": "Commit-0",
            "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\n\n// Textos locales para el componente de cuenta regresiva\nconst COUNTDOWN_TEXT = {\n  defaultMessage: \"Cerrando en\",\n  closeButtonText: \"Cerrar ahora\",\n  seconds: \"segundos\",\n}\n\ninterface AutoCloseCountdownProps {\n  readonly seconds: number\n  readonly message?: string\n  readonly variant?: \"default\" | \"destructive\" | \"primary\"\n  readonly onComplete?: () => void\n  readonly showCloseButton?: boolean\n  readonly closeButtonText?: string\n}\n\nexport function AutoCloseCountdown({\n  seconds,\n  message = COUNTDOWN_TEXT.defaultMessage,\n  variant = \"default\",\n  onComplete,\n  showCloseButton = true,\n  closeButtonText = COUNTDOWN_TEXT.closeButtonText,\n}: AutoCloseCountdownProps) {\n  const [countdown, setCountdown] = useState(seconds)\n\n  useEffect(() => {\n    // Iniciar cuenta regresiva\n    const timer = setInterval(() => {\n      setCountdown((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer)\n          // Intentar cerrar la ventana del navegador\n          window.close()\n          // Ejecutar callback si existe\n          onComplete?.()\n          return 0\n        }\n        return prev - 1\n      })\n    }, 1000)\n\n    return () => clearInterval(timer)\n  }, [onComplete])\n\n  const handleCloseWindow = () => {\n    window.close()\n    onComplete?.()\n  }\n\n  const getTextColorClass = () => {\n    switch (variant) {\n      case \"destructive\":\n        return \"text-destructive\"\n      case \"primary\":\n        return \"text-primary\"\n      default:\n        return \"text-foreground\"\n    }\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <p className=\"text-center text-muted-foreground\">\n        {message} <span className={cn(\"font-bold\", getTextColorClass())}>{countdown}</span> {COUNTDOWN_TEXT.seconds}.\n      </p>\n\n      {showCloseButton && (\n        <Button variant={variant === \"default\" ? \"default\" : variant} className=\"w-full\" onClick={handleCloseWindow}>\n          {closeButtonText}\n        </Button>\n      )}\n    </div>\n  )\n}\n"
        }
    ]
}