{
    "sourceFile": "frontend/components/common/ui/pin-input.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1741625558239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741625640335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,98 +0,0 @@\n-\"use client\"\n-\n-import type React from \"react\"\n-\n-import { useEffect, useRef, useState, useCallback } from \"react\"\n-import { Input } from \"@/components/ui/input\"\n-\n-interface PinInputProps {\n-  readonly onComplete: (pin: string) => void\n-  readonly onClear?: () => void\n-  readonly length?: number\n-}\n-\n-export function PinInput({ onComplete, onClear, length = 4 }: PinInputProps) {\n-  const [values, setValues] = useState<string[]>(Array(length).fill(\"\"))\n-  const inputRefs = useRef<(HTMLInputElement | null)[]>([])\n-\n-  const focusInput = useCallback(\n-    (index: number) => {\n-      if (index >= 0 && index < length) {\n-        inputRefs.current[index]?.focus()\n-      }\n-    },\n-    [length],\n-  )\n-\n-  const handleChange = (index: number, value: string) => {\n-    // Only allow numbers\n-    if (!/^\\d*$/.test(value)) return\n-\n-    const newValues = [...values]\n-    newValues[index] = value.slice(-1) // Only take the last digit\n-\n-    setValues(newValues)\n-\n-    if (value && index < length - 1) {\n-      focusInput(index + 1)\n-    }\n-\n-    // Check if all inputs are filled\n-    if (newValues.every((v) => v) && newValues.join(\"\").length === length) {\n-      onComplete(newValues.join(\"\"))\n-    }\n-  }\n-\n-  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {\n-    if (e.key === \"Backspace\" && !values[index] && index > 0) {\n-      focusInput(index - 1)\n-    }\n-  }\n-\n-  const handlePaste = (e: React.ClipboardEvent) => {\n-    e.preventDefault()\n-    const pastedData = e.clipboardData.getData(\"text\").slice(0, length)\n-    if (!/^\\d+$/.test(pastedData)) return\n-\n-    const newValues = [...values]\n-    pastedData.split(\"\").forEach((char, index) => {\n-      if (index < length) {\n-        newValues[index] = char\n-      }\n-    })\n-    setValues(newValues)\n-\n-    if (pastedData.length === length) {\n-      onComplete(pastedData)\n-    }\n-  }\n-\n-  const clearInputs = () => {\n-    setValues(Array(length).fill(\"\"))\n-    focusInput(0)\n-    onClear?.()\n-  }\n-\n-  useEffect(() => {\n-    focusInput(0)\n-  }, [focusInput])\n-\n-  return (\n-    <div className=\"flex gap-2 justify-center\">\n-      {values.map((value, index) => (\n-        <Input\n-          key={index}\n-          ref={(el) => (inputRefs.current[index] = el)}\n-          type=\"text\"\n-          inputMode=\"numeric\"\n-          maxLength={1}\n-          value={value}\n-          onChange={(e) => handleChange(index, e.target.value)}\n-          onKeyDown={(e) => handleKeyDown(index, e)}\n-          onPaste={handlePaste}\n-          className=\"w-12 h-12 text-center text-2xl border-primary/20 bg-primary/10\"\n-        />\n-      ))}\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741625663784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,12 @@\n       onComplete(newValues.join(\"\"))\n     }\n   }\n \n+  const shouldFocusPreviousInput = (e: React.KeyboardEvent<HTMLInputElement>, index: number) => {\n+    if (shouldFocusPreviousInput(e, index)) {\n+  }\n+\n   const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {\n     if (e.key === \"Backspace\" && !values[index] && index > 0) {\n       focusInput(index - 1)\n     }\n"
                },
                {
                    "date": 1741625671898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n \"use client\"\n \n import type React from \"react\"\n-\n import { useEffect, useRef, useState, useCallback } from \"react\"\n import { Input } from \"@/components/ui/input\"\n \n interface PinInputProps {\n"
                }
            ],
            "date": 1741625558239,
            "name": "Commit-0",
            "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useEffect, useRef, useState, useCallback } from \"react\"\nimport { Input } from \"@/components/ui/input\"\n\ninterface PinInputProps {\n  readonly onComplete: (pin: string) => void\n  readonly onClear?: () => void\n  readonly length?: number\n}\n\nexport function PinInput({ onComplete, onClear, length = 4 }: PinInputProps) {\n  const [values, setValues] = useState<string[]>(Array(length).fill(\"\"))\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([])\n\n  const focusInput = useCallback(\n    (index: number) => {\n      if (index >= 0 && index < length) {\n        inputRefs.current[index]?.focus()\n      }\n    },\n    [length],\n  )\n\n  const handleChange = (index: number, value: string) => {\n    // Only allow numbers\n    if (!/^\\d*$/.test(value)) return\n\n    const newValues = [...values]\n    newValues[index] = value.slice(-1) // Only take the last digit\n\n    setValues(newValues)\n\n    if (value && index < length - 1) {\n      focusInput(index + 1)\n    }\n\n    // Check if all inputs are filled\n    if (newValues.every((v) => v) && newValues.join(\"\").length === length) {\n      onComplete(newValues.join(\"\"))\n    }\n  }\n\n  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Backspace\" && !values[index] && index > 0) {\n      focusInput(index - 1)\n    }\n  }\n\n  const handlePaste = (e: React.ClipboardEvent) => {\n    e.preventDefault()\n    const pastedData = e.clipboardData.getData(\"text\").slice(0, length)\n    if (!/^\\d+$/.test(pastedData)) return\n\n    const newValues = [...values]\n    pastedData.split(\"\").forEach((char, index) => {\n      if (index < length) {\n        newValues[index] = char\n      }\n    })\n    setValues(newValues)\n\n    if (pastedData.length === length) {\n      onComplete(pastedData)\n    }\n  }\n\n  const clearInputs = () => {\n    setValues(Array(length).fill(\"\"))\n    focusInput(0)\n    onClear?.()\n  }\n\n  useEffect(() => {\n    focusInput(0)\n  }, [focusInput])\n\n  return (\n    <div className=\"flex gap-2 justify-center\">\n      {values.map((value, index) => (\n        <Input\n          key={index}\n          ref={(el) => (inputRefs.current[index] = el)}\n          type=\"text\"\n          inputMode=\"numeric\"\n          maxLength={1}\n          value={value}\n          onChange={(e) => handleChange(index, e.target.value)}\n          onKeyDown={(e) => handleKeyDown(index, e)}\n          onPaste={handlePaste}\n          className=\"w-12 h-12 text-center text-2xl border-primary/20 bg-primary/10\"\n        />\n      ))}\n    </div>\n  )\n}\n"
        }
    ]
}