{
    "sourceFile": "frontend/components/pattern-lock,tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740972945495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740972971895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     const point = pointsRef.current.find((p) => p.index === index)\r\n     if (point) setCurrentPoint(point)\r\n   }\r\n \r\n-  const handleMouseMove = (e: React.MouseEvent) => {\r\n+  const handleMouseMove = (e: MouseEvent) => {\r\n     if (!isDrawing || !containerRef.current) return\r\n \r\n     const containerRect = containerRef.current.getBoundingClientRect()\r\n     const x = e.clientX - containerRect.left\r\n"
                }
            ],
            "date": 1740972945495,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport type React from \"react\"\r\n\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ninterface Point {\r\n  x: number\r\n  y: number\r\n  index: number\r\n}\r\n\r\ninterface PatternLockProps {\r\n  size?: number\r\n  onComplete: (pattern: number[]) => void\r\n}\r\n\r\nexport function PatternLock({ size = 3, onComplete }: PatternLockProps) {\r\n  const [pattern, setPattern] = useState<number[]>([])\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n  const [currentPoint, setCurrentPoint] = useState<Point | null>(null)\r\n  const containerRef = useRef<HTMLDivElement>(null)\r\n  const pointsRef = useRef<Point[]>([])\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current\r\n    if (!container) return\r\n\r\n    const dots = Array.from(container.getElementsByClassName(\"pattern-dot\"))\r\n    const points: Point[] = dots.map((dot, index) => {\r\n      const rect = dot.getBoundingClientRect()\r\n      const containerRect = container.getBoundingClientRect()\r\n      return {\r\n        x: rect.left - containerRect.left + rect.width / 2,\r\n        y: rect.top - containerRect.top + rect.height / 2,\r\n        index,\r\n      }\r\n    })\r\n    pointsRef.current = points\r\n  }, [size])\r\n\r\n  const handleMouseDown = (index: number) => {\r\n    setPattern([index])\r\n    setIsDrawing(true)\r\n    const point = pointsRef.current.find((p) => p.index === index)\r\n    if (point) setCurrentPoint(point)\r\n  }\r\n\r\n  const handleMouseMove = (e: React.MouseEvent) => {\r\n    if (!isDrawing || !containerRef.current) return\r\n\r\n    const containerRect = containerRef.current.getBoundingClientRect()\r\n    const x = e.clientX - containerRect.left\r\n    const y = e.clientY - containerRect.top\r\n\r\n    const closestPoint = pointsRef.current.find((point) => {\r\n      const distance = Math.sqrt(Math.pow(point.x - x, 2) + Math.pow(point.y - y, 2))\r\n      return distance < 20 && !pattern.includes(point.index)\r\n    })\r\n\r\n    if (closestPoint) {\r\n      setPattern((prev) => [...prev, closestPoint.index])\r\n      setCurrentPoint(closestPoint)\r\n    }\r\n  }\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDrawing(false)\r\n    setCurrentPoint(null)\r\n    if (pattern.length > 0) {\r\n      onComplete(pattern)\r\n    }\r\n    setPattern([])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className=\"relative h-[300px] w-[300px]\"\r\n      onMouseMove={handleMouseMove}\r\n      onMouseUp={handleMouseUp}\r\n      onMouseLeave={handleMouseUp}\r\n    >\r\n      <div className=\"grid h-full w-full grid-cols-3 grid-rows-3 gap-8 p-8\">\r\n        {Array.from({ length: size * size }).map((_, i) => (\r\n          <div\r\n            key={i}\r\n            className={cn(\"pattern-dot\", pattern.includes(i) && \"active\")}\r\n            onMouseDown={() => handleMouseDown(i)}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {pattern.length > 1 && (\r\n        <svg className=\"absolute inset-0 pointer-events-none\">\r\n          {pattern.slice(0, -1).map((point, i) => {\r\n            const start = pointsRef.current[point]\r\n            const end = pointsRef.current[pattern[i + 1]]\r\n            if (!start || !end) return null\r\n\r\n            return (\r\n              <line\r\n                key={i}\r\n                x1={start.x}\r\n                y1={start.y}\r\n                x2={end.x}\r\n                y2={end.y}\r\n                className=\"stroke-primary/30\"\r\n                strokeWidth=\"2\"\r\n              />\r\n            )\r\n          })}\r\n          {isDrawing && currentPoint && pattern.length > 0 && (\r\n            <line\r\n              x1={currentPoint.x}\r\n              y1={currentPoint.y}\r\n              x2={currentPoint.x}\r\n              y2={currentPoint.y}\r\n              className=\"stroke-primary/30\"\r\n              strokeWidth=\"2\"\r\n            />\r\n          )}\r\n        </svg>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n"
        }
    ]
}