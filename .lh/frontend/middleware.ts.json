{
    "sourceFile": "frontend/middleware.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740974537333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741068556444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,61 @@\n-import { NextResponse } from \"next/server\";\r\n-import type { NextRequest } from \"next/server\";\r\n+import { NextResponse } from \"next/server\"\r\n+import type { NextRequest } from \"next/server\"\r\n+import { getStoredUser } from \"@/lib/utils/auth\"\r\n \r\n export function middleware(request: NextRequest) {\r\n-  const isAuthenticated = request.cookies.has(\"auth\");\r\n-  const isLoginPage = request.nextUrl.pathname === \"/login\";\r\n-  const isRegisterPage = request.nextUrl.pathname === \"/register\";\r\n-  const isAuthPage = isLoginPage || isRegisterPage;\r\n+  const isAuthenticated = request.cookies.has(\"auth\")\r\n+  const isLoginPage = request.nextUrl.pathname === \"/login\"\r\n+  const isRegisterPage = request.nextUrl.pathname === \"/register\"\r\n+  const isAuthPage = isLoginPage || isRegisterPage\r\n \r\n+  // Si no está autenticado y no está en una página de auth, redirigir a login\r\n   if (!isAuthenticated && !isAuthPage) {\r\n-    return NextResponse.redirect(new URL(\"/login\", request.url));\r\n+    return NextResponse.redirect(new URL(\"/login\", request.url))\r\n   }\r\n \r\n+  // Si está autenticado y está en una página de auth, redirigir según rol\r\n   if (isAuthenticated && isAuthPage) {\r\n-    return NextResponse.redirect(new URL(\"/dashboard\", request.url));\r\n+    const user = getStoredUser()\r\n+    if (user) {\r\n+      switch (user.role) {\r\n+        case \"admin\":\r\n+          return NextResponse.redirect(new URL(\"/dashboard/admin\", request.url))\r\n+        case \"mentor\":\r\n+          return NextResponse.redirect(new URL(\"/dashboard/mentor\", request.url))\r\n+        case \"company\":\r\n+          return NextResponse.redirect(new URL(\"/dashboard/company\", request.url))\r\n+        default:\r\n+          return NextResponse.redirect(new URL(\"/dashboard/junior\", request.url))\r\n+      }\r\n+    }\r\n   }\r\n \r\n-  return NextResponse.next();\r\n+  // Si está autenticado, verificar acceso a rutas según rol\r\n+  if (isAuthenticated) {\r\n+    const user = getStoredUser()\r\n+    const path = request.nextUrl.pathname\r\n+\r\n+    if (user) {\r\n+      // Verificar acceso a rutas protegidas\r\n+      if (path.startsWith(\"/dashboard/admin\") && user.role !== \"admin\") {\r\n+        return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n+      }\r\n+      if (path.startsWith(\"/dashboard/mentor\") && user.role !== \"mentor\") {\r\n+        return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n+      }\r\n+      if (path.startsWith(\"/dashboard/company\") && user.role !== \"company\") {\r\n+        return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n+      }\r\n+      if (path.startsWith(\"/dashboard/junior\") && user.role !== \"junior\") {\r\n+        return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  return NextResponse.next()\r\n }\r\n \r\n export const config = {\r\n   matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\r\n-};\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1741068613815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,59 +3,70 @@\n import { getStoredUser } from \"@/lib/utils/auth\"\r\n \r\n export function middleware(request: NextRequest) {\r\n   const isAuthenticated = request.cookies.has(\"auth\")\r\n-  const isLoginPage = request.nextUrl.pathname === \"/login\"\r\n-  const isRegisterPage = request.nextUrl.pathname === \"/register\"\r\n-  const isAuthPage = isLoginPage || isRegisterPage\r\n+  const isAuthPage = isAuthPageCheck(request)\r\n \r\n-  // Si no está autenticado y no está en una página de auth, redirigir a login\r\n   if (!isAuthenticated && !isAuthPage) {\r\n-    return NextResponse.redirect(new URL(\"/login\", request.url))\r\n+    return redirectToLogin(request)\r\n   }\r\n \r\n-  // Si está autenticado y está en una página de auth, redirigir según rol\r\n   if (isAuthenticated && isAuthPage) {\r\n-    const user = getStoredUser()\r\n-    if (user) {\r\n-      switch (user.role) {\r\n-        case \"admin\":\r\n-          return NextResponse.redirect(new URL(\"/dashboard/admin\", request.url))\r\n-        case \"mentor\":\r\n-          return NextResponse.redirect(new URL(\"/dashboard/mentor\", request.url))\r\n-        case \"company\":\r\n-          return NextResponse.redirect(new URL(\"/dashboard/company\", request.url))\r\n-        default:\r\n-          return NextResponse.redirect(new URL(\"/dashboard/junior\", request.url))\r\n-      }\r\n-    }\r\n+    return redirectToDashboard(request)\r\n   }\r\n \r\n-  // Si está autenticado, verificar acceso a rutas según rol\r\n   if (isAuthenticated) {\r\n-    const user = getStoredUser()\r\n-    const path = request.nextUrl.pathname\r\n+    return verifyAccess(request)\r\n+  }\r\n \r\n-    if (user) {\r\n-      // Verificar acceso a rutas protegidas\r\n-      if (path.startsWith(\"/dashboard/admin\") && user.role !== \"admin\") {\r\n-        return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n-      }\r\n-      if (path.startsWith(\"/dashboard/mentor\") && user.role !== \"mentor\") {\r\n-        return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n-      }\r\n-      if (path.startsWith(\"/dashboard/company\") && user.role !== \"company\") {\r\n-        return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n-      }\r\n-      if (path.startsWith(\"/dashboard/junior\") && user.role !== \"junior\") {\r\n-        return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n-      }\r\n+  return NextResponse.next()\r\n+}\r\n+\r\n+function isAuthPageCheck(request: NextRequest): boolean {\r\n+  const isLoginPage = request.nextUrl.pathname === \"/login\"\r\n+  const isRegisterPage = request.nextUrl.pathname === \"/register\"\r\n+  return isLoginPage || isRegisterPage\r\n+}\r\n+\r\n+function redirectToLogin(request: NextRequest) {\r\n+  return NextResponse.redirect(new URL(\"/login\", request.url))\r\n+}\r\n+\r\n+function redirectToDashboard(request: NextRequest) {\r\n+  const user = getStoredUser()\r\n+  if (user) {\r\n+    switch (user.role) {\r\n+      case \"admin\":\r\n+        return NextResponse.redirect(new URL(\"/dashboard/admin\", request.url))\r\n+      case \"mentor\":\r\n+        return NextResponse.redirect(new URL(\"/dashboard/mentor\", request.url))\r\n+      case \"company\":\r\n+        return NextResponse.redirect(new URL(\"/dashboard/company\", request.url))\r\n+      default:\r\n+        return NextResponse.redirect(new URL(\"/dashboard/junior\", request.url))\r\n     }\r\n   }\r\n+}\r\n \r\n-  return NextResponse.next()\r\n+function verifyAccess(request: NextRequest) {\r\n+  const user = getStoredUser()\r\n+  const path = request.nextUrl.pathname\r\n+\r\n+  if (user) {\r\n+    if (path.startsWith(\"/dashboard/admin\") && user.role !== \"admin\") {\r\n+      return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n+    }\r\n+    if (path.startsWith(\"/dashboard/mentor\") && user.role !== \"mentor\") {\r\n+      return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n+    }\r\n+    if (path.startsWith(\"/dashboard/company\") && user.role !== \"company\") {\r\n+      return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n+    }\r\n+    if (path.startsWith(\"/dashboard/junior\") && user.role !== \"junior\") {\r\n+      return NextResponse.redirect(new URL(`/dashboard/${user.role}`, request.url))\r\n+    }\r\n+  }\r\n }\r\n \r\n export const config = {\r\n   matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\r\n }\r\n-\r\n"
                }
            ],
            "date": 1740974537333,
            "name": "Commit-0",
            "content": "import { NextResponse } from \"next/server\";\r\nimport type { NextRequest } from \"next/server\";\r\n\r\nexport function middleware(request: NextRequest) {\r\n  const isAuthenticated = request.cookies.has(\"auth\");\r\n  const isLoginPage = request.nextUrl.pathname === \"/login\";\r\n  const isRegisterPage = request.nextUrl.pathname === \"/register\";\r\n  const isAuthPage = isLoginPage || isRegisterPage;\r\n\r\n  if (!isAuthenticated && !isAuthPage) {\r\n    return NextResponse.redirect(new URL(\"/login\", request.url));\r\n  }\r\n\r\n  if (isAuthenticated && isAuthPage) {\r\n    return NextResponse.redirect(new URL(\"/dashboard\", request.url));\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\r\n};\r\n"
        }
    ]
}