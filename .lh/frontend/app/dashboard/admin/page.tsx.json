{
    "sourceFile": "frontend/app/dashboard/admin/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1741057591673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741057594151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,5 +129,4 @@\n       </div>\r\n     </div>\r\n   )\r\n }\r\n-\r\n"
                },
                {
                    "date": 1741057891121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,132 +0,0 @@\n-\"use client\"\r\n-\r\n-import { useState, useEffect } from \"react\"\r\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\n-import { Button } from \"@/components/ui/button\"\r\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\n-import { useRandomStars } from \"@/hooks/use-random-stars\"\r\n-import { getAllUsers, updateUserRole } from \"@/lib/utils/auth\"\r\n-import type { User } from \"@/lib/types\"\r\n-\r\n-export default function AdminDashboard() {\r\n-  const [users, setUsers] = useState<User[]>([])\r\n-  const stars = useRandomStars(50)\r\n-\r\n-  useEffect(() => {\r\n-    setUsers(getAllUsers())\r\n-  }, [])\r\n-\r\n-  const handleRoleChange = (email: string, newRole: User[\"role\"]) => {\r\n-    updateUserRole(email, newRole)\r\n-    setUsers(getAllUsers())\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"relative\">\r\n-      {/* Stars Background */}\r\n-      <div className=\"fixed inset-0 -z-10 overflow-hidden\">\r\n-        {stars.map((star) => (\r\n-          <div\r\n-            key={star.id}\r\n-            className={`absolute inline-flex animate-pulse ${star.color}`}\r\n-            style={{\r\n-              left: `${star.x}%`,\r\n-              top: `${star.y}%`,\r\n-              width: `${star.size}px`,\r\n-              height: `${star.size}px`,\r\n-              opacity: star.opacity,\r\n-              animation: `pulse ${star.duration}s infinite`,\r\n-            }}\r\n-          >\r\n-            <span className=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-primary opacity-75\" />\r\n-            <span className=\"relative inline-flex h-full w-full rounded-full bg-primary\" />\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-\r\n-      <div className=\"space-y-6 p-6\">\r\n-        <Card className=\"border-primary/20 bg-black/50 backdrop-blur-sm\">\r\n-          <CardHeader>\r\n-            <CardTitle className=\"text-2xl font-bold text-white\">Panel de Administración</CardTitle>\r\n-          </CardHeader>\r\n-          <CardContent>\r\n-            <Table>\r\n-              <TableHeader>\r\n-                <TableRow>\r\n-                  <TableHead>Nombre</TableHead>\r\n-                  <TableHead>Email</TableHead>\r\n-                  <TableHead>Rol</TableHead>\r\n-                  <TableHead>Nivel</TableHead>\r\n-                  <TableHead>Acciones</TableHead>\r\n-                </TableRow>\r\n-              </TableHeader>\r\n-              <TableBody>\r\n-                {users.map((user) => (\r\n-                  <TableRow key={user.email}>\r\n-                    <TableCell className=\"font-medium text-white\">{user.fullName}</TableCell>\r\n-                    <TableCell className=\"text-gray-400\">{user.email}</TableCell>\r\n-                    <TableCell>\r\n-                      <Select\r\n-                        value={user.role}\r\n-                        onValueChange={(value: User[\"role\"]) => handleRoleChange(user.email, value)}\r\n-                      >\r\n-                        <SelectTrigger className=\"w-32 border-primary/20 bg-primary/10\">\r\n-                          <SelectValue />\r\n-                        </SelectTrigger>\r\n-                        <SelectContent>\r\n-                          <SelectItem value=\"junior\">Junior</SelectItem>\r\n-                          <SelectItem value=\"mentor\">Mentor</SelectItem>\r\n-                          <SelectItem value=\"company\">Company</SelectItem>\r\n-                          <SelectItem value=\"admin\">Admin</SelectItem>\r\n-                        </SelectContent>\r\n-                      </Select>\r\n-                    </TableCell>\r\n-                    <TableCell className=\"text-gray-400\">{user.level}</TableCell>\r\n-                    <TableCell>\r\n-                      <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\">\r\n-                        Ver detalles\r\n-                      </Button>\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                ))}\r\n-              </TableBody>\r\n-            </Table>\r\n-          </CardContent>\r\n-        </Card>\r\n-\r\n-        <Card className=\"border-primary/20 bg-black/50 backdrop-blur-sm\">\r\n-          <CardHeader>\r\n-            <CardTitle className=\"text-lg font-medium text-white\">Estadísticas del Sistema</CardTitle>\r\n-          </CardHeader>\r\n-          <CardContent className=\"grid gap-4 md:grid-cols-3\">\r\n-            <div className=\"space-y-2\">\r\n-              <p className=\"text-sm text-gray-400\">Total Usuarios</p>\r\n-              <p className=\"text-2xl font-bold text-white\">{users.length}</p>\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <p className=\"text-sm text-gray-400\">Usuarios Activos</p>\r\n-              <p className=\"text-2xl font-bold text-white\">{users.filter((u) => u.streakDays > 0).length}</p>\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <p className=\"text-sm text-gray-400\">Nuevos Usuarios (Hoy)</p>\r\n-              <p className=\"text-2xl font-bold text-white\">\r\n-                {\r\n-                  users.filter((u) => {\r\n-                    const today = new Date()\r\n-                    const createdAt = new Date(u.createdAt)\r\n-                    return (\r\n-                      createdAt.getDate() === today.getDate() &&\r\n-                      createdAt.getMonth() === today.getMonth() &&\r\n-                      createdAt.getFullYear() === today.getFullYear()\r\n-                    )\r\n-                  }).length\r\n-                }\r\n-              </p>\r\n-            </div>\r\n-          </CardContent>\r\n-        </Card>\r\n-      </div>\r\n-    </div>\r\n-  )\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741057984417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+\"use client\"\r\n+\r\n+import { useState, useEffect } from \"react\"\r\n+import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\n+import { Button } from \"@/components/ui/button\"\r\n+import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\n+import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\n+import { useRandomStars } from \"@/hooks/use-random-stars\"\r\n+import { getAllUsers, updateUserRole } from \"@/lib/utils/auth\"\r\n+import type { User } from \"@/lib/types\"\r\n+\r\n+\r\n+export default function AdminDashboard() {\r\n+  const [users, setUsers] = useState<User[]>([])\r\n+  const stars = useRandomStars(50)\r\n+\r\n+  useEffect(() => {\r\n+    setUsers(getAllUsers())\r\n+  }, [])\r\n+\r\n+  const handleRoleChange = (email: string, newRole: User[\"role\"]) => {\r\n+    updateUserRole(email, newRole)\r\n+    setUsers(getAllUsers())\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"relative\">\r\n+      {/* Stars Background */}\r\n+      <div className=\"fixed inset-0 -z-10 overflow-hidden\">\r\n+        {stars.map((star) => (\r\n+          <div\r\n+            key={star.id}\r\n+            className={`absolute inline-flex animate-pulse ${star.color}`}\r\n+            style={{\r\n+              left: `${star.x}%`,\r\n+              top: `${star.y}%`,\r\n+              width: `${star.size}px`,\r\n+              height: `${star.size}px`,\r\n+              opacity: star.opacity,\r\n+              animation: `pulse ${star.duration}s infinite`,\r\n+            }}\r\n+          >\r\n+            <span className=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-primary opacity-75\" />\r\n+            <span className=\"relative inline-flex h-full w-full rounded-full bg-primary\" />\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+\r\n+      <div className=\"space-y-6 p-6\">\r\n+        <Card className=\"border-primary/20 bg-black/50 backdrop-blur-sm\">\r\n+          <CardHeader>\r\n+            <CardTitle className=\"text-2xl font-bold text-white\">{texts.adminPanelTitle}</CardTitle>\r\n+          </CardHeader>\r\n+          <CardContent>\r\n+            <Table>\r\n+              <TableHeader>\r\n+                <TableRow>\r\n+                  <TableHead>{texts.name}</TableHead>\r\n+                  <TableHead>{texts.email}</TableHead>\r\n+                  <TableHead>{texts.role}</TableHead>\r\n+                  <TableHead>{texts.level}</TableHead>\r\n+                  <TableHead>{texts.actions}</TableHead>\r\n+                </TableRow>\r\n+              </TableHeader>\r\n+              <TableBody>\r\n+                {users.map((user) => (\r\n+                  <TableRow key={user.email}>\r\n+                    <TableCell className=\"font-medium text-white\">{user.fullName}</TableCell>\r\n+                    <TableCell className=\"text-gray-400\">{user.email}</TableCell>\r\n+                    <TableCell>\r\n+                      <Select\r\n+                        value={user.role}\r\n+                        onValueChange={(value: User[\"role\"]) => handleRoleChange(user.email, value)}\r\n+                      >\r\n+                        <SelectTrigger className=\"w-32 border-primary/20 bg-primary/10\">\r\n+                          <SelectValue />\r\n+                        </SelectTrigger>\r\n+                        <SelectContent>\r\n+                          <SelectItem value=\"junior\">Junior</SelectItem>\r\n+                          <SelectItem value=\"mentor\">Mentor</SelectItem>\r\n+                          <SelectItem value=\"company\">Company</SelectItem>\r\n+                          <SelectItem value=\"admin\">Admin</SelectItem>\r\n+                        </SelectContent>\r\n+                      </Select>\r\n+                    </TableCell>\r\n+                    <TableCell className=\"text-gray-400\">{user.level}</TableCell>\r\n+                    <TableCell>\r\n+                      <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\">\r\n+                        {texts.viewDetails}\r\n+                      </Button>\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                ))}\r\n+              </TableBody>\r\n+            </Table>\r\n+          </CardContent>\r\n+        </Card>\r\n+\r\n+        <Card className=\"border-primary/20 bg-black/50 backdrop-blur-sm\">\r\n+          <CardHeader>\r\n+            <CardTitle className=\"text-lg font-medium text-white\">{texts.systemStatsTitle}</CardTitle>\r\n+          </CardHeader>\r\n+          <CardContent className=\"grid gap-4 md:grid-cols-3\">\r\n+            <div className=\"space-y-2\">\r\n+              <p className=\"text-sm text-gray-400\">{texts.totalUsers}</p>\r\n+              <p className=\"text-2xl font-bold text-white\">{users.length}</p>\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <p className=\"text-sm text-gray-400\">{texts.activeUsers}</p>\r\n+              <p className=\"text-2xl font-bold text-white\">{users.filter((u) => u.streakDays > 0).length}</p>\r\n+            </div>\r\n+            <div className=\"space-y-2\">\r\n+              <p className=\"text-sm text-gray-400\">{texts.newUsersToday}</p>\r\n+              <p className=\"text-2xl font-bold text-white\">\r\n+                {\r\n+                  users.filter((u) => {\r\n+                    const today = new Date()\r\n+                    const createdAt = new Date(u.createdAt)\r\n+                    return (\r\n+                      createdAt.getDate() === today.getDate() &&\r\n+                      createdAt.getMonth() === today.getMonth() &&\r\n+                      createdAt.getFullYear() === today.getFullYear()\r\n+                    )\r\n+                  }).length\r\n+                }\r\n+              </p>\r\n+            </div>\r\n+          </CardContent>\r\n+        </Card>\r\n+      </div>\r\n+    </div>\r\n+  )\r\n+}\r\n"
                },
                {
                    "date": 1741057999321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\n import { useRandomStars } from \"@/hooks/use-random-stars\"\r\n import { getAllUsers, updateUserRole } from \"@/lib/utils/auth\"\r\n import type { User } from \"@/lib/types\"\r\n+import { texts } from \"./data\"\r\n \r\n \r\n export default function AdminDashboard() {\r\n   const [users, setUsers] = useState<User[]>([])\r\n"
                },
                {
                    "date": 1741058735566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,134 +0,0 @@\n-\"use client\"\r\n-\r\n-import { useState, useEffect } from \"react\"\r\n-import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\n-import { Button } from \"@/components/ui/button\"\r\n-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\n-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\n-import { useRandomStars } from \"@/hooks/use-random-stars\"\r\n-import { getAllUsers, updateUserRole } from \"@/lib/utils/auth\"\r\n-import type { User } from \"@/lib/types\"\r\n-import { texts } from \"./data\"\r\n-\r\n-\r\n-export default function AdminDashboard() {\r\n-  const [users, setUsers] = useState<User[]>([])\r\n-  const stars = useRandomStars(50)\r\n-\r\n-  useEffect(() => {\r\n-    setUsers(getAllUsers())\r\n-  }, [])\r\n-\r\n-  const handleRoleChange = (email: string, newRole: User[\"role\"]) => {\r\n-    updateUserRole(email, newRole)\r\n-    setUsers(getAllUsers())\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"relative\">\r\n-      {/* Stars Background */}\r\n-      <div className=\"fixed inset-0 -z-10 overflow-hidden\">\r\n-        {stars.map((star) => (\r\n-          <div\r\n-            key={star.id}\r\n-            className={`absolute inline-flex animate-pulse ${star.color}`}\r\n-            style={{\r\n-              left: `${star.x}%`,\r\n-              top: `${star.y}%`,\r\n-              width: `${star.size}px`,\r\n-              height: `${star.size}px`,\r\n-              opacity: star.opacity,\r\n-              animation: `pulse ${star.duration}s infinite`,\r\n-            }}\r\n-          >\r\n-            <span className=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-primary opacity-75\" />\r\n-            <span className=\"relative inline-flex h-full w-full rounded-full bg-primary\" />\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-\r\n-      <div className=\"space-y-6 p-6\">\r\n-        <Card className=\"border-primary/20 bg-black/50 backdrop-blur-sm\">\r\n-          <CardHeader>\r\n-            <CardTitle className=\"text-2xl font-bold text-white\">{texts.adminPanelTitle}</CardTitle>\r\n-          </CardHeader>\r\n-          <CardContent>\r\n-            <Table>\r\n-              <TableHeader>\r\n-                <TableRow>\r\n-                  <TableHead>{texts.name}</TableHead>\r\n-                  <TableHead>{texts.email}</TableHead>\r\n-                  <TableHead>{texts.role}</TableHead>\r\n-                  <TableHead>{texts.level}</TableHead>\r\n-                  <TableHead>{texts.actions}</TableHead>\r\n-                </TableRow>\r\n-              </TableHeader>\r\n-              <TableBody>\r\n-                {users.map((user) => (\r\n-                  <TableRow key={user.email}>\r\n-                    <TableCell className=\"font-medium text-white\">{user.fullName}</TableCell>\r\n-                    <TableCell className=\"text-gray-400\">{user.email}</TableCell>\r\n-                    <TableCell>\r\n-                      <Select\r\n-                        value={user.role}\r\n-                        onValueChange={(value: User[\"role\"]) => handleRoleChange(user.email, value)}\r\n-                      >\r\n-                        <SelectTrigger className=\"w-32 border-primary/20 bg-primary/10\">\r\n-                          <SelectValue />\r\n-                        </SelectTrigger>\r\n-                        <SelectContent>\r\n-                          <SelectItem value=\"junior\">Junior</SelectItem>\r\n-                          <SelectItem value=\"mentor\">Mentor</SelectItem>\r\n-                          <SelectItem value=\"company\">Company</SelectItem>\r\n-                          <SelectItem value=\"admin\">Admin</SelectItem>\r\n-                        </SelectContent>\r\n-                      </Select>\r\n-                    </TableCell>\r\n-                    <TableCell className=\"text-gray-400\">{user.level}</TableCell>\r\n-                    <TableCell>\r\n-                      <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\">\r\n-                        {texts.viewDetails}\r\n-                      </Button>\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                ))}\r\n-              </TableBody>\r\n-            </Table>\r\n-          </CardContent>\r\n-        </Card>\r\n-\r\n-        <Card className=\"border-primary/20 bg-black/50 backdrop-blur-sm\">\r\n-          <CardHeader>\r\n-            <CardTitle className=\"text-lg font-medium text-white\">{texts.systemStatsTitle}</CardTitle>\r\n-          </CardHeader>\r\n-          <CardContent className=\"grid gap-4 md:grid-cols-3\">\r\n-            <div className=\"space-y-2\">\r\n-              <p className=\"text-sm text-gray-400\">{texts.totalUsers}</p>\r\n-              <p className=\"text-2xl font-bold text-white\">{users.length}</p>\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <p className=\"text-sm text-gray-400\">{texts.activeUsers}</p>\r\n-              <p className=\"text-2xl font-bold text-white\">{users.filter((u) => u.streakDays > 0).length}</p>\r\n-            </div>\r\n-            <div className=\"space-y-2\">\r\n-              <p className=\"text-sm text-gray-400\">{texts.newUsersToday}</p>\r\n-              <p className=\"text-2xl font-bold text-white\">\r\n-                {\r\n-                  users.filter((u) => {\r\n-                    const today = new Date()\r\n-                    const createdAt = new Date(u.createdAt)\r\n-                    return (\r\n-                      createdAt.getDate() === today.getDate() &&\r\n-                      createdAt.getMonth() === today.getMonth() &&\r\n-                      createdAt.getFullYear() === today.getFullYear()\r\n-                    )\r\n-                  }).length\r\n-                }\r\n-              </p>\r\n-            </div>\r\n-          </CardContent>\r\n-        </Card>\r\n-      </div>\r\n-    </div>\r\n-  )\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741630750703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\n import { Button } from \"@/components/ui/button\"\n import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n-import { getAllUsers, updateUserRole } from \"@/lib/utils/auth\"\n+import { getAllUsers, updateUserRole } from \"@/config/auth/auth\"\n import type { User } from \"@/lib/types\"\n import { CertificateGeneratorCard } from \"@/components/dashboard/admin/certificate-generator-card\"\n import { StarsBackground } from \"@/components/ui/stars-background\"\n import { MouseReflection } from \"@/components/effects/mouse-reflection\"\n"
                },
                {
                    "date": 1741630762088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { Button } from \"@/components/ui/button\"\n import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\n import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n import { getAllUsers, updateUserRole } from \"@/config/auth/auth\"\n-import type { User } from \"@/lib/types\"\n+import type { User } from \"@/cinfig/types\"\n import { CertificateGeneratorCard } from \"@/components/dashboard/admin/certificate-generator-card\"\n import { StarsBackground } from \"@/components/ui/stars-background\"\n import { MouseReflection } from \"@/components/effects/mouse-reflection\"\n import { DashboardLayout } from \"@/components/dashboard/layout/dashboard-layout\"\n"
                }
            ],
            "date": 1741057591673,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { useRandomStars } from \"@/hooks/use-random-stars\"\r\nimport { getAllUsers, updateUserRole } from \"@/lib/utils/auth\"\r\nimport type { User } from \"@/lib/types\"\r\n\r\nexport default function AdminDashboard() {\r\n  const [users, setUsers] = useState<User[]>([])\r\n  const stars = useRandomStars(50)\r\n\r\n  useEffect(() => {\r\n    setUsers(getAllUsers())\r\n  }, [])\r\n\r\n  const handleRoleChange = (email: string, newRole: User[\"role\"]) => {\r\n    updateUserRole(email, newRole)\r\n    setUsers(getAllUsers())\r\n  }\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      {/* Stars Background */}\r\n      <div className=\"fixed inset-0 -z-10 overflow-hidden\">\r\n        {stars.map((star) => (\r\n          <div\r\n            key={star.id}\r\n            className={`absolute inline-flex animate-pulse ${star.color}`}\r\n            style={{\r\n              left: `${star.x}%`,\r\n              top: `${star.y}%`,\r\n              width: `${star.size}px`,\r\n              height: `${star.size}px`,\r\n              opacity: star.opacity,\r\n              animation: `pulse ${star.duration}s infinite`,\r\n            }}\r\n          >\r\n            <span className=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-primary opacity-75\" />\r\n            <span className=\"relative inline-flex h-full w-full rounded-full bg-primary\" />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"space-y-6 p-6\">\r\n        <Card className=\"border-primary/20 bg-black/50 backdrop-blur-sm\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-2xl font-bold text-white\">Panel de Administración</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Nombre</TableHead>\r\n                  <TableHead>Email</TableHead>\r\n                  <TableHead>Rol</TableHead>\r\n                  <TableHead>Nivel</TableHead>\r\n                  <TableHead>Acciones</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {users.map((user) => (\r\n                  <TableRow key={user.email}>\r\n                    <TableCell className=\"font-medium text-white\">{user.fullName}</TableCell>\r\n                    <TableCell className=\"text-gray-400\">{user.email}</TableCell>\r\n                    <TableCell>\r\n                      <Select\r\n                        value={user.role}\r\n                        onValueChange={(value: User[\"role\"]) => handleRoleChange(user.email, value)}\r\n                      >\r\n                        <SelectTrigger className=\"w-32 border-primary/20 bg-primary/10\">\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"junior\">Junior</SelectItem>\r\n                          <SelectItem value=\"mentor\">Mentor</SelectItem>\r\n                          <SelectItem value=\"company\">Company</SelectItem>\r\n                          <SelectItem value=\"admin\">Admin</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </TableCell>\r\n                    <TableCell className=\"text-gray-400\">{user.level}</TableCell>\r\n                    <TableCell>\r\n                      <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80\">\r\n                        Ver detalles\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"border-primary/20 bg-black/50 backdrop-blur-sm\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-lg font-medium text-white\">Estadísticas del Sistema</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"grid gap-4 md:grid-cols-3\">\r\n            <div className=\"space-y-2\">\r\n              <p className=\"text-sm text-gray-400\">Total Usuarios</p>\r\n              <p className=\"text-2xl font-bold text-white\">{users.length}</p>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <p className=\"text-sm text-gray-400\">Usuarios Activos</p>\r\n              <p className=\"text-2xl font-bold text-white\">{users.filter((u) => u.streakDays > 0).length}</p>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <p className=\"text-sm text-gray-400\">Nuevos Usuarios (Hoy)</p>\r\n              <p className=\"text-2xl font-bold text-white\">\r\n                {\r\n                  users.filter((u) => {\r\n                    const today = new Date()\r\n                    const createdAt = new Date(u.createdAt)\r\n                    return (\r\n                      createdAt.getDate() === today.getDate() &&\r\n                      createdAt.getMonth() === today.getMonth() &&\r\n                      createdAt.getFullYear() === today.getFullYear()\r\n                    )\r\n                  }).length\r\n                }\r\n              </p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}